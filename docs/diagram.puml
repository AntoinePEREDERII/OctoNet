@startuml OctoNet

' Style du diagramme
skinparam classAttributeIconSize 0
skinparam class {
    BackgroundColor White
    ArrowColor Black
    BorderColor Black
}

' Classes principales
class Main {
    + {static} main(String[] args)
}

class Admin {
    - Map<String, Client> clients
    - List<String> remoteServers
    - Map<String, String> routingTable
    - Serveur serveur
    - AdminUI adminUI
    - String localIP
    + Admin()
    + addClient(String clientName)
    + addRemoteClient(String clientName, String serverAddress)
    + addRemoteServer(String host)
    + updateRoutingTable(String serializedTable)
    + sendMessage(String from, String to, String message)
    + sendMessageFromClientToClient(String from, String to, String message)
    + removeClient(String clientName)
    + getLocalIP()
    + getPortSrv()
    + getRoutingTable()
    + getRemoteServers()
    + getServeur()
}

class AdminUI {
    - DefaultListModel<String> clientListModel
    - JList<String> clientJList
    - JTextField serverAddressField
    - JTextField clientSrcField
    - JTextField clientDestField
    - JTextField messageField
    - Admin admin
    + {static} Map<String, ClientWindow> clientWindows
    - JLabel serverInfoLabel
    - JTextArea logArea
    - JTextArea routingTableArea
    + AdminUI(Admin admin)
    + addClientToList(String clientName)
    + updateRoutingTable()
    + addMessageToClientWindow(String from, String clientName, String message)
    + addLog(String log)
    + removeClientFromList(String clientName)
    - showClientWindow(String clientName)
    - generateRandomClientId()
}

class Client {
    - String name
    + Client(String name)
    + getName()
    + receiveMessage(String from, String message)
    + sendMessage(String destClient, String message)
    + sendTrame(Trame trame)
    - compressLZ78(String input)
    - decompressLZ78(String compressed)
    - calculateParity(String data)
    - checkParity(String data)
}

class ClientWindow {
    - String clientName
    - JTextArea chatArea
    - JTextField messageField
    - JTextField destField
    - Admin admin
    + ClientWindow(String clientName, Admin admin)
    - sendMessage()
    + receiveMessage(String from, String to, String message)
    + getClientName()
}

class Serveur {
    - Admin admin
    - AdminUI adminUI
    - int port
    + Serveur(Admin admin)
    + start()
    + setAdminUI(AdminUI adminUI)
    + getPort()
    + sendTrameToServer(Trame trame, String serverAddress)
}

' Classes de trames
class Trame {
    + {abstract} int type_message
    + {abstract} String serveur_cible
    + {abstract} String serveur_source
}

class Trame_message {
    + String client_cible
    + String client_source
    + String du
    + Trame_message(int type_message, String serveur_cible, String serveur_source, String client_cible, String client_source, String du)
    + getClient_cible()
    + getClient_source()
    + getDu()
}

class Trame_routage {
    + List<String> serveurs
    + List<List<String>> clients
    + List<Integer> distances
    + Trame_routage(int type_message, String serveur_cible, String serveur_source, List<String> serveurs, List<List<String>> clients, List<Integer> distances)
}

' Relations
Main --> Admin : creates
Admin --> AdminUI : creates
Admin --> Serveur : creates
Admin --> Client : creates
AdminUI --> ClientWindow : creates
Client --> Trame : uses
Client --> Trame_message : uses
Serveur --> Trame : uses
Serveur --> Trame_routage : uses

Trame <|-- Trame_message
Trame <|-- Trame_routage

@enduml 